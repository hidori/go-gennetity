package app

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"os"
	"path"
	"strings"

	"github.com/hidori/go-genprop"
	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

const (
	tagName   = "property"
	doNotEdit = "// Code generated by github.com/hidori/go-genprop/cmd/genprop DO NOT EDIT."
)

var initialismFlag = flag.String("initialism", "id,url,api", "names to which initialism should be applied")

func Run() error {
	flag.Parse()

	args := flag.Args()
	if len(args) != 1 {
		fmt.Printf("usage: %s [OPTION]... <FILE>\n\noption(s):\n", path.Base(os.Args[0]))
		flag.PrintDefaults()

		return nil
	}

	config := &genprop.GeneratorConfig{
		TagName:    tagName,
		Initialism: strings.Split(*initialismFlag, ","),
	}

	generator := genprop.NewGenerator(config)

	return generate(generator, args[0], os.Stdout)
}

func generate(generator *genprop.Generator, fileName string, writer io.Writer) error {
	file, err := parser.ParseFile(token.NewFileSet(), fileName, nil, parser.AllErrors)
	if err != nil {
		return errors.Wrap(err, "fail to parser.ParseFile()")
	}

	decls, err := generator.Generate(token.NewFileSet(), file)
	if err != nil {
		return errors.Wrap(err, "fail to generator.Generate()")
	}

	buffer := bytes.NewBuffer([]byte{})

	err = format.Node(buffer, token.NewFileSet(), &ast.File{
		Name:  ast.NewIdent(file.Name.Name),
		Decls: decls,
	})
	if err != nil {
		return errors.Wrap(err, "fail to format.Node()")
	}

	cooked, err := imports.Process("<"+tagName+">", buffer.Bytes(), &imports.Options{FormatOnly: false})
	if err != nil {
		return errors.Wrap(err, "fail to imports.Process()")
	}

	_, _ = fmt.Fprintln(writer, doNotEdit)
	_, _ = writer.Write(cooked)

	return nil
}
